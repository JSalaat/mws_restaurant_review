{"version":3,"sources":["main.js"],"names":["restaurants","neighborhoods","cuisines","selectedFilters","map","markers","document","addEventListener","event","fetchNeighborhoods","fetchCuisines","registerServiceWorker","navigator","serviceWorker","console","warn","register","then","reg","controller","waiting","log","installing","worker","state","DBHelper","error","self","fillNeighborhoodsHTML","select","getElementById","forEach","option","createElement","innerHTML","neighborhood","value","append","fillCuisinesHTML","cuisine","window","initMap","loc","lat","lng","google","maps","Map","zoom","center","scrollwheel","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","ul","m","setMap","setAttribute","createRestaurantHTML","restaurant","addMarkersToMap","li","pictureEl","sourceEl","imgPath","imageUrlForRestaurant","replace","type","srcset","sourceJpeg","image","className","alt","name","src","sizes","address","more","href","urlForRestaurant","marker","mapMarkerForRestaurant","addListener","location","url","push"],"mappings":"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","file":"main.js","sourcesContent":["let restaurants,\r\n  neighborhoods,\r\n  cuisines;\r\nvar selectedFilters = {};\r\nvar map;\r\nvar markers = [];\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n  registerServiceWorker();\r\n});\r\n\r\nlet registerServiceWorker = () => {\r\n    if (!navigator.serviceWorker) {\r\n        console.warn('[registerServiceWorker] No service worker available in browser.');\r\n    }\r\n\r\n    navigator.serviceWorker.register('scripts/serviceWorker.js').then(function(reg) {\r\n        if (!navigator.serviceWorker.controller) {\r\n            console.warn('[serviceWorker.register] No controller. Aborting.');\r\n            return;\r\n        }\r\n\r\n        if (reg.waiting) {\r\n            console.log('[serviceWorker.register] State::Waiting');\r\n            return;\r\n        }\r\n\r\n        if (reg.installing) {\r\n            console.log('[serviceWorker.register] State::Installing');\r\n            reg.installing.addEventListener('statechange', (worker) => {\r\n                if (worker.state === 'installed') {\r\n                    console.log('[serviceWorker.register] StateChange::Installed');\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        console.log(reg);\r\n    });\r\n};\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nlet fetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nlet fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nlet fetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nlet fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n  updateRestaurants();\r\n}\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nlet updateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  selectedFilters.cuisine = cSelect[cIndex].value;\r\n  selectedFilters.neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(selectedFilters.cuisine, selectedFilters.neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nlet resetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  self.markers.forEach(m => m.setMap(null));\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nlet fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.setAttribute('aria-label', `List of ${selectedFilters.cuisine} food within ${selectedFilters.neighborhood} neighborhood`);\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n  addMarkersToMap();\r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nlet createRestaurantHTML = (restaurant) => {\r\n  const li = document.createElement('li');\r\n  const pictureEl = document.createElement('picture');\r\n  const sourceEl = document.createElement('source');\r\n  const imgPath = DBHelper.imageUrlForRestaurant(restaurant).replace(\".jpg\", \"\");\r\n\r\n  sourceEl.type = 'image/webp';\r\n  sourceEl.srcset = `${imgPath}.webp`;\r\n  const sourceJpeg = document.createElement('source');\r\n  sourceJpeg.type = 'image/jpeg';\r\n\r\n  const image = document.createElement('img');\r\n  image.className = 'restaurant-img';\r\n  image.alt = `Image for Restaurant ${restaurant.name}`;\r\n  image.setAttribute('aria-label', `Restaurant ${restaurant.name} image`);\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant).replace(\".jpg\", \"\");\r\n\r\n  image.src = `${imgPath}_800.jpg`;\r\n  image.sizes='(max-width: 960px) 50vw, 100vw';\r\n  image.srcset = [`${imgPath}_400.jpg 400w`, `${imgPath}_800.jpg 800w`];\r\n  pictureEl.append(sourceEl);\r\n  pictureEl.append(sourceJpeg);\r\n  pictureEl.append(image);\r\n  li.append(pictureEl);\r\n\r\n  const name = document.createElement('h2');\r\n  name.innerHTML = restaurant.name;\r\n  li.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  li.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  li.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  more.innerHTML = 'View Details';\r\n  more.setAttribute('aria-label', `View restaurant ${restaurant.name}`);\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  li.append(more);\r\n\r\n  return li;\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nlet addMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url\r\n    });\r\n    self.markers.push(marker);\r\n  });\r\n}\r\n"]}