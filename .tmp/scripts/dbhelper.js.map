{"version":3,"sources":["dbhelper.js"],"names":["DBHelper","callback","localforage","keys","then","filter","key","length","getItem","value","fetch","DATABASE_URL","res","json","data","setItem","catch","e","status","err","console","log","id","promises","r","Promise","all","restaurant","reviews","error","flag","navigator","onLine","alert","method","removeCache","params","window","addEventListener","submitReview","body","JSON","stringify","restaurant_id","name","rating","comments","clear","cuisine","fetchRestaurants","restaurants","results","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","marker","L","latlng","lat","lng","title","alt","url","urlForRestaurant","addTo","newMap","event","type","Date","timeStamp","port"],"mappings":"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","file":"dbhelper.js","sourcesContent":["/**\n * Common database helper functions.\n */\n\nclass DBHelper {\n\n  /**\n   * Database URL.\n   * Change this to restaurants.json file location on your server.\n   * @return {string}\n   */\n  static get DATABASE_URL() {\n    const port = 1337; // Change this to your server port\n    return `http://localhost:${port}`;\n  }\n\n  /**\n   * Fetch all restaurants.\n   */\n  static fetchRestaurants(callback) {\n    localforage.keys().then(function (keys) {\n      // An array of all the key names.\n      if (keys.filter(key => key == '/restaurants').length > 0) {\n        localforage.getItem('/restaurants')\n          .then((value) => callback(null, value))\n      }\n      else {\n        fetch(`${DBHelper.DATABASE_URL}/restaurants`)\n          .then((res) =>\n            res.json().then((data) => {\n              localforage.setItem('/restaurants', data)\n                .then(()=> localforage.getItem('/restaurants'))\n                .then((value) => callback(null, value))\n            })\n          )\n          .catch(e => callback((`Request failed. Returned status of ${e.status}`), null));\n      }\n    }).catch(function (err) {\n      // This code runs if there were any errors\n      console.log(err);\n    });\n  }\n\n  /**\n   * Fetch a restaurant by its ID.\n   */\n  static fetchRestaurantById(id, callback) {\n    localforage.keys().then(function (keys) {\n      // An array of all the key names.\n      if (keys.filter(key => key == `/restaurants/${id}`).length > 0) {\n\n        localforage.getItem(`/restaurants/${id}`)\n          .then((value) => callback(null, value))\n\n      }\n      else {\n        const promises = [\n          fetch(DBHelper.DATABASE_URL + `/restaurants/${id}`).then(r=> r.json()),\n          fetch(DBHelper.DATABASE_URL + `/reviews/?restaurant_id=${id}`).then(r=> r.json())\n        ];\n        Promise.all(promises)\n          .then(data => {\n            restaurant = data[0];\n            restaurant.reviews = data[1];\n            localforage.setItem(`/restaurants/${id}`, restaurant)\n              .then(()=> localforage.getItem(`/restaurants/${id}`))\n              .then((value) => callback(null, value))\n\n          })\n          .catch(error => callback(error, null));\n      }\n\n    }).catch(function (err) {\n      // This code runs if there were any errors\n      console.log(err);\n    });\n  }\n\n  static toggleFavorite(id, flag, callback) {\n    if (!navigator.onLine){\n      alert('You are not connected to the internet! Please try again later');\n    }\n    else {\n      fetch(`${DBHelper.DATABASE_URL}/restaurants/${id}/?is_favorite=${flag}`, {\n        method: 'put'\n      }).then(res => res.json())\n        .then(res => {\n          this.removeCache();\n          callback(null, res)\n        });\n    }\n  }\n\n  static submitReview(params, callback) {\n    if (!navigator.onLine){\n      window.addEventListener('online', () => this.submitReview(params, callback));\n      alert('Your review has been saved! We will post it when you are connected to the internet');\n    }\n    else {\n      fetch(`${DBHelper.DATABASE_URL}/reviews/`, {\n        method: 'post',\n        body: JSON.stringify({\n          'restaurant_id': params.restaurant_id,\n          'name': params.name,\n          'rating': params.rating,\n          'comments': params.comments\n        })\n      }).then(res => res.json())\n        .then(res => {\n          this.removeCache();\n          callback(null, res)\n        });\n    }\n  }\n\n  static removeCache() {\n    localforage.clear();\n  }\n\n  /**\n   * Fetch restaurants by a cuisine type with proper error handling.\n   */\n  static fetchRestaurantByCuisine(cuisine, callback) {\n    // Fetch all restaurants  with proper error handling\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Filter restaurants to have only given cuisine type\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\n   * Fetch restaurants by a neighborhood with proper error handling.\n   */\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Filter restaurants to have only given neighborhood\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\n   */\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        let results = restaurants;\n        if (cuisine != 'all') { // filter by cuisine\n          results = results.filter(r => r.cuisine_type == cuisine);\n        }\n        if (neighborhood != 'all') { // filter by neighborhood\n          results = results.filter(r => r.neighborhood == neighborhood);\n        }\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\n   * Fetch all neighborhoods with proper error handling.\n   */\n  static fetchNeighborhoods(callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Get all neighborhoods from all restaurants\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood);\n        // Remove duplicates from neighborhoods\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i);\n        callback(null, uniqueNeighborhoods);\n      }\n    });\n  }\n\n  /**\n   * Fetch all cuisines with proper error handling.\n   */\n  static fetchCuisines(callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Get all cuisines from all restaurants\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\n        // Remove duplicates from cuisines\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i);\n        callback(null, uniqueCuisines);\n      }\n    });\n  }\n\n  /**\n   * Restaurant page URL.\n   */\n  static urlForRestaurant(restaurant) {\n    return (`./restaurant.html?id=${restaurant.id}`);\n  }\n\n  /**\n   * Restaurant image URL.\n   */\n  static imageUrlForRestaurant(restaurant) {\n    return (`/img/${restaurant.id}`);\n  }\n\n  /**\n   * Map marker for a restaurant.\n   */\n  static mapMarkerForRestaurant(restaurant, map) {\n    const marker = new L.marker([restaurant.latlng.lat, restaurant.latlng.lng],\n      {title: restaurant.name,\n        alt: restaurant.name,\n        url: DBHelper.urlForRestaurant(restaurant)\n      })\n    marker.addTo(newMap);\n    return marker;\n  }\n\n  static handleConnectionChange(event){\n    if(event.type == 'offline'){\n      console.log('You lost connection.');\n    }\n    if(event.type == 'online'){\n      console.log('You are now back online.');\n    }\n\n    console.log(new Date(event.timeStamp));\n  }\n\n}\n"]}