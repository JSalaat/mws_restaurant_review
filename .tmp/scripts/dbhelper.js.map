{"version":3,"sources":["dbhelper.js"],"names":["DBHelper","callback","fetch","DATABASE_URL","then","res","json","data","catch","e","status","id","fetchRestaurants","error","restaurants","restaurant","find","r","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","marker","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP","port"],"mappings":"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","file":"dbhelper.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337; // Change this to your server port\r\n    return `http://localhost:${port}/restaurants`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    fetch(DBHelper.DATABASE_URL)\r\n        .then((res) =>\r\n            res.json().then((data) => {\r\n                callback(null, data);\r\n            })\r\n        )\r\n        .catch(e => callback((`Request failed. Returned status of ${e.status}`), null));\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return (`/img/${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  }\r\n\r\n}\r\n"]}